# -*- coding: utf-8 -*-
"""Task4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WCwnMXQ11sfd4KHR3It4SmgUz0e-r9-y
"""

#import the Necessary Packages
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler

"""import the datasets and merge them into single dataset to train with the model and drop the unimportant columns"""

sales=pd.read_csv("/content/sales.csv");
sales.head()

stock=pd.read_csv("/content/sensor_stock_levels.csv");
stock.head()

stock.drop(columns=["Unnamed: 0"])

temp=pd.read_csv("/content/sensor_storage_temperature.csv");
temp.head()

temp.drop(columns=["Unnamed: 0"])

st=stock.merge(temp,on="timestamp")
st.head()

df=sales.merge(st,on="timestamp")
df.head()

df.isnull().info()

df1=df.drop(columns=['Unnamed: 0','Unnamed: 0_x','Unnamed: 0_y','transaction_id','id_x','id_y','product_id_x','product_id_y'])
df1.head()

#df1['date'] = pd.to_datetime(df1['timestamp']).dt.date
#df1['time'] = pd.to_datetime(df1['timestamp']).dt.time

#df1=df1.drop(columns=['timestamp'])

df1.head()

from sklearn.preprocessing import LabelEncoder
df1.customer_type	=(LabelEncoder().fit_transform(df1.customer_type))
df1.category=(LabelEncoder().fit_transform(df1.category))
df1.payment_type=(LabelEncoder().fit_transform(df1.payment_type))
df1.head()

df1['timestamp']= pd.to_datetime(df1['timestamp']).astype('int64')/ 10**9

x=df1.drop(columns=['total'])
y=df1['total']

from sklearn.model_selection import train_test_split #split the dataset for testing and training
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=1)

from sklearn.preprocessing import StandardScaler #standard scaler to scale the data
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)
x_train

from sklearn.ensemble import RandomForestRegressor #import the algorithm and train the model
model = RandomForestRegressor()
trained_model = model.fit(x_train, y_train)

y_pred = trained_model.predict(x_test)

from sklearn.metrics import mean_absolute_error,r2_score #error and r2_score
print(mean_absolute_error(y_test,y_pred))
print(r2_score(y_test,y_pred))